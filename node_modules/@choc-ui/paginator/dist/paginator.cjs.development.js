'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var react = require('@chakra-ui/react');

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var defaultData = {
  current: null,
  defaultCurrent: 1,
  defaultPage: 1,
  defaultPageSize: 10,
  disabled: false,
  hideOnSinglePage: false,
  itemRender: function itemRender() {
    return null;
  },
  pageSize: 0,
  pageNeighbours: 0,
  pageSizeOptions: [10, 20, 50, 100],
  paginationProps: null,
  responsive: false,
  showQuickJumper: false,
  showSizeChanger: null,
  showTotal: function showTotal() {
    return null;
  },
  simple: null,
  total: 0,
  onChange: function onChange() {
    return '';
  },
  onShowSizeChange: function onShowSizeChange() {
    return '';
  },
  size: 'md',
  rounded: 'md',
  baseStyles: null,
  activeStyles: null,
  hoverStyles: null,
  colorScheme: 'brand',
  focusRing: false,
  basePath: null
};
var PaginationContext = /*#__PURE__*/React__default.createContext({});

var usePaginationStyles = function usePaginationStyles(props) {
  var _React$useContext = React__default.useContext(PaginationContext),
      colorScheme = _React$useContext.colorScheme,
      rounded = _React$useContext.rounded,
      size = _React$useContext.size,
      baseStyles = _React$useContext.baseStyles,
      activeStyles = _React$useContext.activeStyles,
      hoverStyles = _React$useContext.hoverStyles;

  var activeStyle = activeStyles || {
    bg: react.useColorModeValue(colorScheme + ".600", colorScheme + ".500"),
    color: react.useColorModeValue('white', 'gray.200'),
    cursor: 'pointer'
  };
  var hoverStyle = {
    _hover: hoverStyles || activeStyle
  };
  var baseStyle = baseStyles || {
    rounded: rounded,
    bg: react.useColorModeValue('white', 'gray.800'),
    color: react.useColorModeValue('gray.700', 'gray.200'),
    userSelect: 'none'
  };

  var getSizeStyle = function getSizeStyle(size) {
    var styles = {};

    switch (size) {
      case 'xs':
        styles = {
          px: 2,
          fontSize: 'xs'
        };
        break;

      case 'sm':
        styles = {
          px: 3,
          py: 1,
          fontSize: 'sm'
        };
        break;

      case 'md':
        styles = {
          px: 4,
          py: 1,
          fontSize: 'md'
        };
        break;

      case 'lg':
        styles = {
          px: 5,
          py: 2,
          fontSize: 'lg'
        };
        break;
    }

    return styles;
  };

  var sizeStyle = getSizeStyle(size);
  var disabledStyle = {
    opacity: 0.6,
    cursor: 'not-allowed'
  };
  return _extends({}, sizeStyle, baseStyle, !props.disabled && hoverStyle, props.active && activeStyle, props.disabled && disabledStyle);
};

var handleResponsive = function handleResponsive(props) {
  var type = props.type,
      active = props.active,
      responsive = props.responsive;
  var show = true;

  switch (type) {
    case 'page':
      if (!active) show = false;else if (!responsive.activePage) show = false;
      break;
  }

  return !show && 'none';
};

var PagButton = function PagButton(props) {
  var _React$useContext = React__default.useContext(PaginationContext),
      responsive = _React$useContext.responsive,
      focusRing = _React$useContext.focusRing;

  var paginationStyles = usePaginationStyles(props);
  var display = {
    display: [responsive && handleResponsive(_extends({}, props, {
      responsive: responsive
    })), 'block']
  };
  var onClick = !props.disabled ? props.onClick : null;
  var href = props.href ? {
    href: props.href
  } : {};
  var focusRingStyles = {
    boxShadow: focusRing ? typeof focusRing === 'string' ? "0 0 0 3px " + focusRing : "0 0 0 3px rgba(66, 153, 225, 0.6)" : 'none'
  };
  return React__default.createElement(react.Button, Object.assign({
    onClick: onClick,
    as: props.as,
    mx: 1,
    my: "auto"
  }, paginationStyles, {
    _first: {
      ml: 0
    },
    _last: {
      mr: 0
    },
    _focus: focusRingStyles,
    size: props.size
  }, display, href), props.children);
};

var LEFT_PAGE = 'LEFT';
var RIGHT_PAGE = 'RIGHT';
/**
 * Helper method for creating a range of numbers
 * range(1, 5) => [1, 2, 3, 4, 5]
 */

var range = function range(from, to, step) {
  if (step === void 0) {
    step = 1;
  }

  var i = from;
  var range = [];

  while (i <= to) {
    range.push(i);
    i += step;
  }

  return range;
};

var fetchPageNumbers = function fetchPageNumbers() {
  var props = React__default.useContext(PaginationContext);
  var totalPages = Math.ceil(props.total / props.pageSize);
  var currentPage = props.currentPage;
  var pageNeighbours = props.pageNeighbours;
  /**
   * totalNumbers: the total page numbers to show on the control
   * totalBlocks: totalNumbers + 2 to cover for the left(<) and right(>) controls
   */

  var totalNumbers = pageNeighbours * 2 + 3;
  var totalBlocks = totalNumbers + 2;

  if (totalPages > totalBlocks) {
    var startPage = Math.max(2, currentPage - pageNeighbours);
    var endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);
    var pages = range(startPage, endPage);
    /**
     * hasLeftSpill: has hidden pages to the left
     * hasRightSpill: has hidden pages to the right
     * spillOffset: number of hidden pages either to the left or to the right
     */

    var hasLeftSpill = startPage > 2;
    var hasRightSpill = totalPages - endPage > 1;
    var spillOffset = totalNumbers - (pages.length + 1);

    switch (true) {
      // handle: (1) < {5 6} [7] {8 9} (10)
      case hasLeftSpill && !hasRightSpill:
        {
          var extraPages = range(startPage - spillOffset, startPage - 1);
          pages = [LEFT_PAGE].concat(extraPages, pages);
          break;
        }
      // handle: (1) {2 3} [4] {5 6} > (10)

      case !hasLeftSpill && hasRightSpill:
        {
          var _extraPages = range(endPage + 1, endPage + spillOffset);

          pages = [].concat(pages, _extraPages, [RIGHT_PAGE]);
          break;
        }
      // handle: (1) < {4 5} [6] {7 8} > (10)

      case hasLeftSpill && hasRightSpill:
      default:
        {
          pages = [LEFT_PAGE].concat(pages, [RIGHT_PAGE]);
          break;
        }
    }

    return [1].concat(pages, [totalPages]);
  }

  return range(1, totalPages);
};

var PaginationComp = function PaginationComp() {
  var props = React__default.useContext(PaginationContext);
  var totalPages = Math.ceil(props.total / props.pageSize);
  var prevRender = props.itemRender(props.currentPage, 'prev');
  var nextRender = props.itemRender(props.currentPage, 'next');
  var leftRender = props.itemRender(props.currentPage, 'backward');
  var rightRender = props.itemRender(props.currentPage, 'forward');
  var pageSizeRender = props.itemRender(props.pageSize, 'pageSize');
  var pageRender = props.itemRender(props.currentPage, 'page');
  var totalRender = props.showTotal(props.total);
  if (!totalPages || props.hideOnSinglePage && totalPages === 1) return null;
  var pages = fetchPageNumbers();

  var changePage = function changePage(page) {
    var currentPage = Math.max(0, Math.min(page, totalPages));
    props.setCurrentPage(currentPage);
    props.onChange(currentPage, totalPages, props.pageSize, props.total);
  };

  var gotoPage = function gotoPage(evt, page) {
    evt.preventDefault();
    changePage(page);
  };

  var fastBackward = function fastBackward(evt) {
    evt.preventDefault();
    var page = props.currentPage - props.pageNeighbours * 2 - 1;
    changePage(page);
  };

  var fastForward = function fastForward(evt) {
    evt.preventDefault();
    var page = props.currentPage + props.pageNeighbours * 2 + 1;
    changePage(page);
  };

  var backward = function backward(evt) {
    evt.preventDefault();
    changePage(props.currentPage - 1);
  };

  var forward = function forward(evt) {
    evt.preventDefault();
    changePage(props.currentPage + 1);
  };

  var changePageSize = function changePageSize(size) {
    props.setPageSize(size);
    props.onShowSizeChange(props.currentPage, size);
  };

  var _React$useState = React__default.useState(props.currentPage),
      simplePage = _React$useState[0],
      setSimplePage = _React$useState[1];

  var _React$useState2 = React__default.useState(''),
      pageJumper = _React$useState2[0],
      setPageJumper = _React$useState2[1];

  var simplePageUpdate = function simplePageUpdate(e) {
    e.preventDefault();

    if (isNaN(simplePage)) {
      setSimplePage(props.currentPage);
    } else {
      props.setCurrentPage(Math.max(0, Math.min(simplePage, totalPages)));
    }
  };

  var pageJumperUpdate = function pageJumperUpdate(e) {
    e.preventDefault();

    if (isNaN(pageJumper)) {
      setPageJumper('');
    } else {
      props.setCurrentPage(Math.max(0, Math.min(pageJumper, totalPages)));
      setPageJumper('');
    }
  };

  var responsiveDisplay = function responsiveDisplay(type) {
    if (props.responsive) {
      if (typeof props.responsive !== 'boolean' && Object.keys(props.responsive).includes(type)) {
        return {
          display: 'block'
        };
      }

      return {
        display: ['none', 'block']
      };
    }

    return {};
  };

  var hrefLink = function hrefLink(page) {
    if (props.basePath && page > 0 && page !== props.currentPage) {
      return {
        href: "" + props.basePath + page
      };
    }

    return {};
  };

  return props.total > 0 ? React__default.createElement(react.Box, Object.assign({}, props.paginationProps || {
    w: 'full',
    justifyContent: 'center'
  }), totalRender !== null && React__default.createElement(react.chakra.span, Object.assign({
    mx: 1,
    my: "auto",
    fontSize: props.size
  }, responsiveDisplay('totalRender')), totalRender), props.simple ? React__default.createElement(React__default.Fragment, null, React__default.createElement("form", {
    onSubmit: simplePageUpdate
  }, React__default.createElement(react.Input, {
    textAlign: "center",
    isDisabled: props.disabled,
    my: "auto",
    size: props.size === 'lg' ? 'md' : props.size === 'xs' ? 'xs' : 'sm',
    w: props.size === 'lg' ? 50 : 10,
    value: simplePage,
    onChange: function onChange(e) {
      return setSimplePage(e.target.value);
    }
  })), React__default.createElement(react.chakra.span, {
    userSelect: "none",
    opacity: props.disabled ? 0.6 : 1,
    mx: 1,
    my: "auto",
    fontSize: props.size
  }, "/ 5")) : React__default.createElement(React__default.Fragment, null, React__default.createElement(PagButton, Object.assign({
    as: prevRender,
    disabled: props.currentPage === 1 || props.disabled,
    onClick: backward
  }, hrefLink(props.currentPage - 1), {
    size: props.size === 'lg' ? 'md' : props.size === 'xs' ? 'xs' : 'sm'
  }), !prevRender && '<'), pages.map(function (page, index) {
    if (page === 'LEFT') return React__default.createElement(PagButton, Object.assign({
      as: leftRender,
      key: index,
      onClick: fastBackward
    }, hrefLink(props.currentPage - props.pageNeighbours * 2 - 1), {
      size: props.size === 'lg' ? 'md' : props.size === 'xs' ? 'xs' : 'sm'
    }, responsiveDisplay('fastBackward'), {
      my: "auto"
    }), !leftRender && '<<');
    if (page === 'RIGHT') return React__default.createElement(PagButton, Object.assign({
      as: rightRender,
      key: index,
      onClick: fastForward
    }, hrefLink(props.currentPage + props.pageNeighbours * 2 + 1), {
      size: props.size === 'lg' ? 'md' : props.size === 'xs' ? 'xs' : 'sm'
    }, responsiveDisplay('fastForward'), {
      my: "auto"
    }), !rightRender && '>>');
    var active = page === props.currentPage;
    return React__default.createElement(PagButton, Object.assign({
      as: pageRender,
      disabled: props.disabled,
      active: active,
      key: "page-" + index,
      onClick: function onClick(evt) {
        return gotoPage(evt, page);
      }
    }, hrefLink(page), {
      size: props.size === 'lg' ? 'md' : props.size === 'xs' ? 'xs' : 'sm',
      type: "page"
    }), page);
  }), React__default.createElement(PagButton, Object.assign({
    as: nextRender,
    disabled: props.currentPage === totalPages || props.disabled,
    onClick: forward
  }, hrefLink(props.currentPage + 1), {
    size: props.size === 'lg' ? 'md' : props.size === 'xs' ? 'xs' : 'sm'
  }), !nextRender && '>')), props.showSizeChanger && React__default.createElement(react.Menu, null, React__default.createElement(PagMenuButton, {
    ml: 1,
    as: pageSizeRender,
    disabled: props.disabled,
    size: props.size === 'lg' ? 'md' : props.size === 'xs' ? 'xs' : 'sm'
  }, props.pageSize, " / page"), React__default.createElement(react.MenuList, null, React__default.createElement(react.MenuOptionGroup, {
    onChange: changePageSize
  }, props.pageSizeOptions.filter(function (opt) {
    return opt !== props.pageSize;
  }).map(function (opt, oid) {
    return React__default.createElement(react.MenuItemOption, {
      fontSize: props.size,
      value: opt.toString(),
      key: "size" + oid
    }, opt, " / page");
  })))), props.showQuickJumper && React__default.createElement(react.HStack, Object.assign({
    as: "form",
    userSelect: "none",
    opacity: props.disabled ? 0.6 : 1,
    ml: 2,
    onSubmit: pageJumperUpdate
  }, responsiveDisplay('pageJumper')), React__default.createElement(react.Text, {
    wordBreak: "unset"
  }, "Go to:"), React__default.createElement(react.Input, {
    width: "50px",
    value: pageJumper,
    isDisabled: props.disabled,
    onChange: function onChange(e) {
      return setPageJumper(e.target.value);
    },
    size: props.size === 'lg' ? 'md' : props.size === 'xs' ? 'xs' : 'sm'
  }))) : null;
};

var PagMenuButton = function PagMenuButton(props) {
  return React__default.createElement(react.MenuButton, Object.assign({
    as: PagButton
  }, props));
};

var methods = ['itemRender', 'setCurrentPage'];
var nonMethods = /*#__PURE__*/Object.keys(defaultData).filter(function (k) {
  return !methods.includes(k);
});
var filterProps = function filterProps(props) {
  var validProps = nonMethods.reduce(function (acc, nxt) {
    acc.push(props[nxt]);
    return acc;
  }, []);
  return React__default.useMemo(function () {
    return props;
  }, validProps);
};

var Pagination = function Pagination(props) {
  var allProps = _extends({}, defaultData, props);

  var _React$useState = React.useState(allProps.current || allProps.defaultCurrent),
      currentPage = _React$useState[0],
      setCurrentPage = _React$useState[1];

  React.useEffect(function () {
    props.current && setCurrentPage(props.current);
  }, [props.current]);

  var _React$useState2 = React.useState(allProps.pageSize > 0 ? allProps.pageSize : allProps.defaultPageSize),
      pageSize = _React$useState2[0],
      setPageSize = _React$useState2[1];

  var contextvalue = _extends({}, allProps);

  var value = React.useMemo(function () {
    return _extends({}, contextvalue, {
      currentPage: currentPage,
      setCurrentPage: setCurrentPage,
      pageSize: pageSize,
      setPageSize: setPageSize
    });
  }, [filterProps(contextvalue), currentPage, pageSize]);
  return React.createElement(PaginationContext.Provider, {
    value: value
  }, React.createElement(PaginationComp, null));
};

exports.default = Pagination;
//# sourceMappingURL=paginator.cjs.development.js.map
